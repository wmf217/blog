---
layout:     post
title:      "面向对象的设计原则"
subtitle:   " \"面向对象的设计原则\""
date:       2019-05-02 20:44:00
author:     "wmf"
header-img: "img/post-bg-js-version.jpg"
catalog: true
tags:
    - 面向对象
---
##前言
这里列举了七个原则
原文
http://c.biancheng.net/view/1319.html
##### 开闭原则
<font color="red">开闭原则是总纲</font>
对扩展开放，对修改关闭(Software entities should be open for extension，but closed for modification)
好处：增加复用性和维护性，减少BUG(新开发功能不影响原功能)
##### 里氏替换原则
继承必须确保超类所拥有的性质在子类中仍然成立(Inheritance should ensure that any property proved about supertype objects also holds for subtype objects)
<font color="red">里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能</font>
如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系
<font color="red">正方形不是长方形</font>
##### 依赖倒置原则
依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象（High level modules shouldnot depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions）。其核心思想是：<font color="red">要面向接口编程，不要面向实现编程</font>
##### 单一职责原则
单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）
单一职责原则是最简单但又最难运用的原则，<font color="red">需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中</font>
##### 接口隔离原则
客户端不应该被迫依赖于它不使用的方法（Clients should not be forced to depend on methods they do not use）。该原则还有另外一个定义：一个类对另一个类的依赖应该建立在最小的接口上（The dependency of one class to another one should depend on the smallest possible interface）
<font color="red">要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用</font>
##### 迪米特法则
只与你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）
如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是<font color="red">降低类之间的耦合度，提高模块的相对独立性</font>
##### 合成复用原则
要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现，如果要使用继承关系，则必须严格遵循里氏替换原则。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范



