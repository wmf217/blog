---
layout:     post
title:      "操作系统(1)-进程和线程"
subtitle:   " \"操作系统基本知识\""
date:       2017-06-08 20:44:00
author:     "wmf"
header-img: "img/java.jpg"
catalog: true
tags:
    - linux
---
## 进程与线程
进程是操作系统资源分配的最小单位，线程是任务调度和执行的最小单位<br>
每个线程都有独立的数据空间，程序之间的切换开销比较大；每一个进程中可能有多个线程同时执行，他们共享数据空间，每个线程都有独立的运行栈和程序计数器，切换的开销比较小<br>
##### 线程的调度算法
先来先服务(FCFS): 可能会造成线程饥饿<br>
最短作业优先(SJF): 进入就绪队列时进程“预告”需要多长的 CPU 运行时间，先计算需要计算时间最少的进程<br>
基于优先权的调度算法(FPPS)：优先级最高的进程最先被 CPU 调度，缺陷：进程饥饿，优先级低的进程可能永远也不会被 CPU 调度，解决方案：Aging思想，就绪队列中的进程随时间的推移，优先级单调递增（动态优先级）<br>
时间片轮转(RR)：思路：每一个进程每一次使用 CPU 时都会有一个时间上限（时间片），超过上限时该进程自动回到就绪队列队尾，等待被调用
效果：每一个进程需要等待的响应时间不超过 (n - 1) t
（该算法只注重响应时间，换句话说，如果时间片足够大，轮转算法将退化为先来先服务算法）
解决问题：防止某些进程很耗时间，导致整体响应时间太长
存在问题：上下文切换会造成额外开销<br>
...
##### 线程的上下文切换(ContextSwitch)
 对于单核CPU来说(对于多核CPU，此处就理解为一个核)，CPU在一个时刻只能运行一个线程，当在运行一个线程的过程中转去运行另外一个线程，这个叫做线程上下文切换(对于进程也是类似)
 >由于可能当前线程的任务并没有执行完毕，所以在切换时需要保存线程的运行状态，以便下次重新切换回来时能够继续切换之前的状态运行。举个简单的例子：比如一个线程A正在读取一个文件的内容，正读到文件的一半，此时需要暂停线程A，转去执行线程B，当再次切换回来执行线程A的时候，我们不希望线程A又从文件的开头来读取。
在理解这个之前，要理解程序计数器的作用（以下摘抄来自《深入理解java虚拟机》）：
程序计数器是一块较小的内存空间，它可以看作是当前线程所执行字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。且由于java虚拟机的多线程是通过线程轮流切换并分配器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器是一个内核）都只会执行一条线程中的指令，因为为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，我们称这类区域为“线程私有”的内存。
线程切换时需要知道在这之前当前线程已经执行到哪条指令了，所以需要记录程序计数器的值，另外比如说线程正在进行某个计算的时候被挂起了，那么下次继续执行的时候需要知道之前挂起时变量的值时多少，因此需要记录CPU寄存器的状态。所以一般来说，线程上下文切换过程中会记录程序计数器、CPU寄存器状态等数据。

##### IPC
inter-process communication，指进程之间的通信，常用的有基于文件、套接字、消息队列、管道、共享内存等
##### 协程
[https://blog.csdn.net/maligebazi/article/details/83502761](https://blog.csdn.net/maligebazi/article/details/83502761)
