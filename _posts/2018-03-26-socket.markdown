---
layout:     post
title:      "websocket简易实现"
subtitle:   " \"fuck proud\""
date:       2018-03-26 19:26:00
author:     "wmf"
header-img: "img/common.jpg"
catalog: true
tags:
    - socket
    - webSocket
---

## 前言
*从网上获取一个例子,肢解代码并简单注释,去掉了debug便于代码清晰*
## 正文
#### 服务端
写一个php后台并运行  
###### 四句标准写法创建服务端socket
```php
$master = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);  
socket_set_option($master, SOL_SOCKET, SO_REUSEADDR, 1);  
socket_bind($master, '127.0.0.1', 2000);  
socket_listen($master, 10);  
```
socket_create 创建一个服务端socket,AF_INET代表IPV4协议，SOCK_STREAM套接字流，还可以用SOCK_DGRAM,前者TCP流，后者UDP流，SOL_TCP代表TCP协议    
socket_set_option 这个函数的作用是设置IP和端口重用,在重启服务器后能重新使用此端口，暂时未尝试不开启的后果    
socket_bind 将IP和端口绑定在服务器socket上  
socket_listen 这句话非常重要，将连接套接口变成被动连接套接口，使一个进程可以被其它进程请求，从而变成一个服务器进程，其中的能存储的请求不明的socket数目  
配合后面的方法socket_accept可以返回要来的连接socket   
Documentation:After the socket socket has been created using socket_create() and bound to a name with socket_bind(), it may be told to listen for incoming connections on socket  
上面的方法顺利执行则会创建一个服务端的socket，绑定了IP端口并监听  
###### 然后把服务器socket存入数组中
```php
$sockets = [$master];
```  
###### 接下来写一个无限循环```while(true)```，循环内部首先是一个重要的方法 
```php
$reads = $sockets;
socket_select($reads, NULL, NULL, NULL);
```
该函数前三个参数代表可读/可写/异常：  
Read:  
The sockets listed in the read array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a socket resource is also ready on end-of-file, in which case a socket_read() will return a zero length string)  
Write:  
The sockets listed in the write array will be watched to see if a write will not block.  
Except:  
The sockets listed in the except array will be watched for exceptions  
这里只传了一个参数，简单来说，第一个参数传入一个socket的集合，这个集合里的socket将会被监视是否有socket可读，再可读的情况下可以使用socket_read()方法读取数据(上面的end-of-file不太理解)
最后一个参数代表监视时间，如果设置为NULL，该程序会一直堵塞知道有可读socket出现  
note:
You do not need to pass every array to socket_select(). You can leave it out and use an empty array or NULL instead. Also do not forget that those arrays are passed by reference and will be modified after socket_select() returns.
注意前三个参数为引用传值,所以一但socket_select返回，这三个参数将会被修改，也就是说第一个参数传入的是一个socket集合，当函数结束后，第一个参数变为可读的socket集合  
###### 然后循环可读socket
```php
foreach ($reads as $socket)
```
###### 如果可读socket是服务器socket(当客户端试图与服务端建立连接时，服务器socket变为可读)  
```php
if ($socket == $master) {
    $client = socket_accept($master);
    array_push($sockets, $client);//将返回的客户端socket存入集合去监视  
}
```
其中socket_accept接受连接到服务器进程的socket，将返回一个新的socket，如果链接的是队列将返回第一个socket    
###### 如果可读socket是客户端socket
```php
else {
   $bytes = @socket_recv($socket,$buffer,2048,0);  
   if ($bytes < 9) {}    
   if (!$handshake) {  
        handShake($socket, $buffer);   
        $handshake = true;    
    } else {   
        $buffer = decode($buffer);     
        $buffer = frame($buffer);  
        socket_write($socket, $buffer, strlen($buffer));      
    }   
}  
```
socket_recv其实就是另外一种写法的socket_read(),和socket_select()一样都是引用传值并修改参数,改方法执行之后第二个参数存储了读取的信息，建立连接时返回的是头部信息，传送数据时返回的是帧
handshake 变量初始为false,表示是否握手，多个连接就的用一个数组保存握手状态  
decode 解析帧数据，方法也固定不解释   
frame  组装帧数据,不解释  
socket_write 这里收到数据马上把数据原样发回客户端socket   
###### 然后就这么一直循环下去监视可读socket.....
#### 客户端
客户端比较简单，看函数的名字基本可以猜到用途，贴代码
```js
 ws = new WebSocket("ws://127.0.0.1:2000");//连接服务器        
 ws.onopen = function(event){alert("已经与服务器建立了连接\r\n当前连接状态："+this.readyState);};
 ws.onmessage = function(event){alert("接收到服务器发送的数据：\r\n"+event.data);};
 ws.onclose = function(event){alert("已经与服务器断开连接\r\n当前连接状态："+this.readyState);};
 ws.onerror = function(event){alert("WebSocket异常！");};
 ws.send('好气啊');//发送信息给服务器
```
## 总结
*未完待续*