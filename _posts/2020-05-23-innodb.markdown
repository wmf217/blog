---
layout:     post
title:     "索引"
subtitle:   " \"mysql innodb index\""
date:       2020-05-23 20:44:00
author:     "wmf"
header-img: "img/in-post/bigdata.jpg"
catalog: true
tags:
    - java
---
## 页
页在操作系统中代表操作系统获取磁盘数据的最小单位<br>
它的出现是由于局部性原则<br>
操作系统认为在磁盘中取数据时有很大概率接下来会获取当前数据的相邻数据，因此增加该最小单位的用处是避免多次IO操作，提升效率<br>
1页==4KB
## innodb
innodb中也存在页的概念，同样是获取磁盘数据的最小单位，1页==16kb
## 页的结构+主键索引
页的结构分为：页头/页目录/用户数据区
<img class="shadow" src="/img/in-post/page.png" width="360"/>
如图 页中的每个数据构成一个长链表(每个数据都有一个向下指针),为了解决长链表查找慢的问题，加入了页目录，类似于字典的目录，目录的存在前提是数据要按照某种规律排序，这里的排序就是按主键排序，所以innodb默认都会有一个主键索引(如果没有主键，取第一个唯一索引，如果都没有innodb会建立一个隐藏主键rowId)<br>
页目录的作用是为了解决数据长链表问题，而页目录本身也是个链表，它的查找方式一般会做二分查找的优化<br>
页头包含一个向前指针和向后指针<br>
innodb中6条数据为一组，会生成一个目录指向
## B+tree
innodb中数据的结构本身就是一个B+ tree<br>
b+ tree 的特点，1.数据冗余，2.子节点存在指针，3.每个节点可能会有多个元素<br>
页的内部结构是一个简单的b+ tree 只有两层
## 聚集索引
当mysql中的数据不断增多，就会出现很多个页，又会出现一个长链表，为了解决那么就要形成一个tree结构来加快寻找速度，由于页与页之间有互相的指针，所以又是一个b+ tree的结构，这就是索引结构，以下示意图假设每个页中只能存放两个元素，最终的结构如下
<img class="shadow" src="/img/in-post/index.png" width="360"/>
如图：mysql会把一些页充当目录使用，里面存放的值为主键值的冗余和指向实际地址的指针，构成一个b+ tree树，当搜索条件给出一个主键id，可以迅速的查找到相应数据<br>
如图：mysql的主键索引即包括目录又包括数据库中的所有数据，这种索引又叫聚集索引，上图的***是除索引字段外的其它字段<br>
***下假设数据库中 a , b, c ,d, e , f字段 a为主键***
## 其他索引
主键索引是innodb默认生成的，如果我们想对某些字段自建索引，那么这个索引在页中只是存在了当前索引值和主键值，并不会包含所有数据，如果是联合索引，那么就包括联合索引的所有字段和主键，如果是单字段的索引那么只包括单字段和主键，并且该索引是按照当前索引字段排序的(由于没有必要再存一份数据库的所有数据)<br>
因此，假如当前有一个bcd联合索引，当走该索引时，如果是select a, b, 则会通过该索引快速取出所需数据
，但如果是select c,d,e 由于e的数据不存在在bcd索引中，所以他的执行顺序是先走一遍bcd索引查出主键a,再走一遍主键索引，查找到c d e
## 最左前缀原则
当前有bcd索引，则c=1 and d=2是不会走该索引的，因为没有给出明确的b，而bcd索引是按照bcd排序的，是无法比较大小的，好比两个三位数都已知后两位而不知首位是比较不了大小的，而b=1 and c = 1就可以走bcd索引<br>
同理，加入存在b索引，当执行b like '%123'是无法走索引的，而'123%'是可以的
## 几个例子
当前有b索引，那么b=1必然可以走索引，但是b>1是不一定走索引的<br>
因为加入select b, d 当前查询走b索引之后并没有包含d数据，该索引只包含(a,b)两个字段的数据，所以还需要走主键索引去取出d字段(***回表***)，如果b>1的数据特别多，那么会很麻烦，有时效率甚至不如全表扫描，所以这是mysql会自动优化，不一定会走索引
## 覆盖索引
如上，回表是需要再走一遍索引的，所以为了避免回表可以让查询字段尽可能的出现在索引里，或者说让联合索引尽可能的覆盖常见业务所查询的字段，这种优化方式称为覆盖索引，如select b, c这条语句即使没有where条件是可以走bcd索引的，因为走bcd索引可以获取所有需要数据，不需要回表，bcd索引不包含数据，每页的数据条数就会变多，可以减少磁盘IO(读取页)



